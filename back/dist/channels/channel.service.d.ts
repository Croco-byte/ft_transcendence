import ChannelBannedUserService from "./channel_banned_users/channel_banned_user.service";
import ChannelMutedUserService from "src/channels/channel_muted_users/channel_muted_user.service";
import MessageService from "src/messages/message.service";
import { User } from "src/users/users.entity";
import { Repository } from "typeorm";
import { Channel } from './channel.entity';
import { InvitationService } from "./invitation_links/invitation.service";
export default class ChannelService {
    private repository;
    private readonly channelMutedUserService;
    private readonly channelBannedUserService;
    private readonly messageService;
    private invitationService;
    private relations;
    constructor(repository: Repository<Channel>, channelMutedUserService: ChannelMutedUserService, channelBannedUserService: ChannelBannedUserService, messageService: MessageService, invitationService: InvitationService);
    insert(channel: Channel): Promise<Channel>;
    findAllPublicChannels(): Promise<Channel[]>;
    findAllJoinedChannels(user: User): Promise<Channel[]>;
    findAllDirectChannels(user: User): Promise<Channel[]>;
    findAll(): Promise<Channel[]>;
    findOne(id: string): Promise<Channel>;
    directExists(user_1: User, user_2: User): Promise<Channel>;
    delete(id: string): Promise<void>;
    save(channel: Channel): Promise<Channel>;
    addUser(channel: Channel, user: User, enable_pending?: boolean): Promise<void>;
    addPassword(channel: Channel, password: string): Promise<void>;
    check_password(channel: Channel, password: string): Promise<boolean>;
    removePassword(channel: Channel): Promise<void>;
    addAdmin(channel: Channel, user: User): Promise<void>;
    removeAdmin(channel: Channel, user: User): Promise<void>;
    addMessage(channel: Channel, user: User, content: string): Promise<void>;
    getMessages(channel: Channel): Promise<any>;
    muteUser(channel: Channel, user: User): Promise<void>;
    unmuteUser(channel: Channel, user: User): Promise<void>;
    isMuted(channel: Channel, user: User): Promise<boolean>;
    banUser(channel: Channel, user: User): Promise<void>;
    unbanUser(channel: Channel, user: User): Promise<void>;
    isBanned(channel: Channel, user: User): Promise<boolean>;
    updateModifiedDate(channel: Channel): Promise<void>;
    isOwner(channel: Channel, user: User): boolean;
    isAdmin(channel: Channel, user: User): boolean;
    isInChannel(channel: Channel, user: User): boolean;
    removeUser(channel: Channel, user: User): Promise<void>;
    isPendingUser(channel: Channel, user: User): boolean;
    removePendingUser(channel: Channel, user: User): Promise<void>;
    getUserRole(channel: Channel, user: User): "ADMIN" | "OWNER" | "MEMBER";
    setChannelType(channel: Channel, type: 'public' | 'private'): Promise<void>;
    generateInvitation(channel: Channel, user: User): Promise<string>;
    removeMessages(channel: Channel): Promise<Channel>;
    removeInvitations(channel: Channel): Promise<Channel>;
    removeMutedUsers(channel: Channel): Promise<Channel>;
    removeBannedUsers(channel: Channel): Promise<Channel>;
    clean(channel: Channel): Promise<Channel>;
}

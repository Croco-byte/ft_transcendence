import { Socket } from 'socket.io';
import { UsersService } from 'src/users/users.service';
import { ConfigService } from '@nestjs/config';
import { Setup, Room, Game } from './interfaces/game.interface';
import { MatchHistoryEntity } from '../users/match-history.entity';
import { Repository } from 'typeorm';
export declare class GameService {
    private matchHistoryRepository;
    private usersService;
    private configService;
    constructor(matchHistoryRepository: Repository<MatchHistoryEntity>, usersService: UsersService, configService: ConfigService);
    private rooms;
    private logger;
    private readonly EASY;
    private readonly MEDIUM;
    private readonly HARD;
    private readonly GAME_WIDTH;
    private readonly GAME_HEIGHT;
    private readonly BASE_SPEED;
    private readonly BASE_VEL;
    private readonly BALL_RADIUS;
    private PADDLE_HEIGHT;
    private readonly PADDLE_WIDTH;
    private readonly PADDLE_BORDER;
    private readonly MAX_BALL_SPEED;
    private INCREASE_SPEED_PERCENTAGE;
    private readonly MAX_ANGLE;
    readonly FRAMERATE: number;
    readonly TIME_MATCH_START: number;
    generateRoomId(): string;
    findRoomByPlayerId(playerId: string): Room;
    attributeRoom(userDbId: number, playerId: string, setupChosen?: Setup): Promise<Room>;
    attributePrivateRoom(userDbId: number, playerId: string, privateRoomId: string): Room;
    playerJoinRoom(roomToFill: Room, setupChosen: Setup, userDbId: number, playerId: string): Room;
    createNewRoom(setupChosen: Setup, userDbId: number, roomName: string, playerId: string): Room;
    removeRoom(wss: Socket, room: Room): Promise<void>;
    checkIfSameSetup(setup1: Setup, setup2: Setup): boolean;
    updateGame(room: Room): boolean;
    updateScores(client: Socket, wss: Socket, room: Room, clientId?: string): Promise<boolean>;
    updateScoresDueDisconnexion(room: Room, clientId: string): Promise<void>;
    updateScoresDueToWin(room: Room): Promise<void>;
    addToMatchHistory(room: Room): Promise<void>;
    addToMatchHistoryAfterDisconnexion(room: Room, clientId: string): Promise<void>;
    private detectCollision;
    private playerOneIntersectBall;
    private playerTwoIntersectBall;
    updatePlayerPos(playerId: string, playerPosY: number): void;
    private userMoveUp;
    private userMoveDown;
    setOptions(level: string): void;
    private resetEndGameInfo;
    private resetPlayerDbInfo;
    resetGame(setup: Setup, dir?: number, _p1score?: number, _p2score?: number): Game;
    private resetBall;
    private resetPlayer;
    private resetSetup;
    private resetPaddle;
}
